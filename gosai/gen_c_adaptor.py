from pycparser import c_ast, c_generator


generator =c_generator.CGenerator()

def gen_c_func_adaptor(astperfile):
    adaptorH = r'''//Automatically generated by goSAIadapterBuilder.
#include "sai_api_tbl.h"
'''
    adaptorC = r'''//Automatically generated by goSAIadapterBuilder.
#include "sai_api_tbl_init.c"
'''
    adaptorFuncdefs = []
    for file_ast_fn in astperfile.keys():
        # for file_ast_fn in ['/home/johnnie/Documents/gitprojects/SAI/inc/sairouterinterface.h', ]:
        # for file_ast_fn in ['/home/johnnie/Documents/gitprojects/SAI/inc/sairoute.h', ]:
        file_ast = astperfile[file_ast_fn]
        fn_core = file_ast_fn.split('/')[-1]
        fileC = r'''//Automatically generated by goSAIadapterBuilder.
#include "sai_api_tbl.h"
'''
        fileH = r'''//Automatically generated by goSAIadapterBuilder.
    #include "sai.h"
    '''
        api_ast = [inst for inst in file_ast if
                   'api' in inst.name and not "sai_common_api_t" == inst.name and not "sai_api" in inst.name]
        api = dict([(apidecl.type.type.names[0], apidecl.name) for apitypedef in api_ast for apidecl in
                    apitypedef.type.type.decls])
        # print(api)
        for functypedef in file_ast:
            if not 'fn' in functypedef.name:
                continue
            funcdecl = functypedef.type.type
            if type(funcdecl.type) is c_ast.TypeDecl:
                funcdecl.type.declname = funcdecl.type.declname[:-3]
                funcdeclreturntype = funcdecl.type.type.names[0]
            else:
                funcdecl.type.type.declname = funcdecl.type.type.declname[:-3]
                funcdeclreturntype = funcdecl.type.type.type.names[0]
            if funcdeclreturntype != 'sai_status_t':
                print("Ret", funcdeclreturntype)
                continue
            tblname = file_ast[-1].name + 'bl'
            if 'api' not in tblname:
                tblname = None
                for td in file_ast:
                    if 'table' in td.name:
                        tblname = td.name
                if tblname == None:
                    break

            fdecl = c_ast.Decl(functypedef.name[:-3], list(), list(), list(), type=funcdecl, init=None, bitsize=None)
            fbody = c_ast.Compound(block_items=[c_ast.Return(
                expr=c_ast.FuncCall(name=c_ast.StructRef(name=c_ast.StructRef(name=c_ast.ID(name='sai_api_tbl')
                                                                              , type='.', field=c_ast.ID(name=tblname)),
                                                         # type='->',field=c_ast.ID(name=functypedef.name[4:-3])),
                                                         type='->', field=c_ast.ID(name=api[functypedef.name])),
                                    args=c_ast.ExprList(exprs=[c_ast.ID(p.name) for p in funcdecl.args.params])))])
            funcdef = c_ast.FuncDef(decl=fdecl, param_decls=None, body=fbody)
            # print(funcdef)
            adaptorFuncdefs.append(fdecl)
            funcH = generator.visit(c_ast.FileAST(fdecl))
            fileH += funcH
            funcC = generator.visit(funcdef)
            fileC += funcC
        # print(file_ast)
        if fileC[-2:] != '"\n':
            hname = 'adaptor/gen-inc/' + fn_core[:-2] + "_adaptor.h"
            with open(hname, 'w') as f:
                f.write(fileH)
            print("written to", hname)
            cname = 'adaptor/gen-src/' + fn_core[:-2] + "_adaptor.c"
            with open(cname, 'w') as f:
                f.write(fileC)
            print("written to", cname)
            adaptorH += '#include "' + hname + '"\n'
            adaptorC += '#include "' + cname + '"\n'
    with open("adaptor/gen-inc/sai_adaptor.h", 'w') as f:
        f.write(adaptorH)
    with open("adaptor/sai_adaptor_all.c", 'w') as f:
        f.write(adaptorC)
    return adaptorFuncdefs